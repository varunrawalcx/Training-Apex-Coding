public class TriggerHandler {
    public static void OpportunityAmount(List<Opportunity> OppList){
        if(OppList!=null){
            for(Opportunity opp : OppList){
                if(opp.Amount!=null && opp.Amount>100000){
                    opp.Description='Hot Opportunity';
                }
            }
        }
    }
    public static void PositionsValues(List<Position__c> posList){
        if(posList!=null){
            for(Position__c pos : posList){
                if(pos.Open_Date__c==null){
                    pos.Open_Date__c=Date.Today();
                }
                if(pos.Max_Pay__c==null){
                    pos.Max_Pay__c=100000;
                }
                if(pos.Min_Pay__c==null){
                    pos.Min_Pay__c=5000;
                }
            }
        }
    }
    public static void CasetoAccount(List<Case> CaseList){
        if(CaseList!=null){
            Map<Id,Case> TempMap=new Map<Id,Case>();
            for(Case Cs : CaseList){
                TempMap.put(Cs.AccountId,Cs);
            }
            List<Account> AccList=[select id,Latest_Case_Number__c from Account where id in :TempMap.keySet()];
            if(Acclist!=null){
                for(Account Acc: AccList){
                    Acc.Latest_Case_Number__c=TempMap.get(Acc.id).CaseNumber;
                }
            }
            if(AccList!=null){ 
                update AccList;
            }
        }
    }
    public static void OpportunitytoAccount(List<Opportunity> OppList){
        if(OppList!=null){
            Map<Id,Opportunity> TempMap=new Map<Id,Opportunity>();
            for(Opportunity Opp : OppList){
                TempMap.put(Opp.AccountId,Opp);
            }
            List<Account> AccList=[select id,Recent_opportunity_Amount__c from Account where id in :TempMap.keySet()];
            if(Acclist!=null){
                for(Account Acc: AccList){
                    if(TempMap.get(Acc.id).Amount!=null){
                        Acc.Recent_opportunity_Amount__c=TempMap.get(Acc.id).Amount;
                    }
                }
            }
            if(AccList!=null){ 
                update AccList;
            }
        }
    }
    public static void AccounttoContact(Map<id,Account> AccMap){
        List<Contact> ConList=[select id, AccountId from contact where AccountId in :AccMap.keyset()];
        if(!ConList.IsEmpty()){
            for(Contact Con:ConList){
                if(AccMap.ContainsKey(Con.AccountId)){
                    Con.Phone=AccMap.get(Con.AccountId).Phone;
                }
            }
        }
        if(ConList!=null){ 
            update ConList;
        }
    }
    public static void AccountNotUpdate(List<Account> AccList){
        for(Account Acc:AccList){
            Date AccDate=Acc.CreatedDate.date();
            Integer Days=AccDate.daysBetween(Date.Today());
            if(Days<=7){
                Acc.adderror('Can\'t Update The Record Within 7 days of Creation!!!');
            }
        }
    }
    public static void AccountEmployeeCount(List<Employee__c> EmpList){
        Map<id,List<Employee__c>> EmpIds=new Map<id,List<Employee__c>>();
        for(Employee__c emp : EmpList){
            if(!EmpIds.ContainsKey(emp.Account__c))
                EmpIds.put(emp.Account__c,new List<Employee__c>());
            EmpIds.get(emp.Account__c).add(emp);
        }
        List<Account> AccList=[select id, Present_Employee_Count__c,(Select id from Employees__r where Account__c in :EmpIds.keySet()) from Account where id in :EmpIds.keySet()];
        for(Account Acc: AccList){
            if(Acc.Present_Employee_Count__c==0){
                Acc.Present_Employee_Count__c=1;
            }else{
                Acc.Present_Employee_Count__c=Acc.Employees__r.size();
            }
        }
        if(AccList!=null){ 
            update AccList;
        }
    }
    public static void AccountPartnerCustomerCase(List<Case> CaseList){
        set<id> CaseIds=new set<id>();
        for(Case ids : CaseList){
            Caseids.add(ids.AccountId);
        }
        List<Account> UpdatedList=new List<Account>();
        List<Account> AccList=[select id, Number_of_Customer_Case__c, Number_of_Partner_Case__c from Account where id in :CaseIds];
        List<Case> CasList1=[select id,RecordTypeId,AccountId from Case];
        for(Account Acc:AccList){
            Integer Cust=0;
            Integer part=0;
            for(Case cas: CasList1){
                if(cas.AccountId==Acc.id){
                    if(cas.RecordTypeId=='0125j000000W27bAAC'){
                        Cust+=1;
                    }
                    if(cas.RecordTypeId=='0125j000000W27WAAS'){
                        Part+=1;
                    }
                }
            }
            Acc.Number_of_Customer_Case__c=Cust;
            Acc.Number_of_Partner_Case__c=Part;
            UpdatedList.add(Acc);
        }
        if(UpdatedList!=null){ 
            update UpdatedList;
        }
    }
    public static void OpportunityTotalRevenue(List<Opportunity> OppList){
        Map<id,List<Opportunity>> OppIds=new Map<id,List<Opportunity>>();
        for(Opportunity opp : OppList){
            if(!OppIds.ContainsKey(opp.AccountId))
                OppIds.put(opp.AccountId,new List<Opportunity>());
            OppIds.get(opp.AccountId).add(opp);
        }
        List<Account> AccList=[select id, AnnualRevenue, (Select id, Amount from Opportunities where AccountId in :OppIds.keySet()) from Account where id in :OppIds.keySet()];
        if(AccList.size()!=0){
            for(Account Acc: AccList){
                Decimal PseudoAmount=0;
                for(Opportunity Opp:Acc.Opportunities){
                    if(Opp.Amount!=null){
                        PseudoAmount+=Opp.Amount;
                    }
                }
                Acc.AnnualRevenue=PseudoAmount;
            }
        }
        if(AccList!=null){ 
            update AccList;
        }
    }
    public static void ContactDuplicate(List<Contact> ConList){
        List<Contact> ConList1=[select id, Email from Contact];
        for(Contact con:ConList){
            for(Contact con1:ConList1){
                if(con.Email==Con1.Email && con.Id!=con1.Id){
                    con.adderror('Duplicate Email Found!!!');
                }
            }
        }
    }
    public static void OpptoAccount(List<Opportunity> OppList){
        Map<id,List<Opportunity>> OppIds=new Map<id,List<Opportunity>>();
        for(Opportunity opp : OppList){
            if(!OppIds.ContainsKey(opp.AccountId))
                OppIds.put(opp.AccountId,new List<Opportunity>());
            OppIds.get(opp.AccountId).add(opp);
        }
        List<Account> AccList=[select id, Related_Opportunity__c, Total_Amount__c,(Select id, Amount from Opportunities where AccountId in :OppIds.keySet()) from Account where id in :OppIds.keySet()];
        if(AccList.size()!=0){
            for(Account Acc: AccList){
                if(Acc.Opportunities.size()!=0){
                    Acc.Related_Opportunity__c=Acc.Opportunities.size();
                }
                Decimal PseudoAmount=0;
                for(Opportunity Opp:Acc.Opportunities){
                    if(Opp.Amount!=null){
                        PseudoAmount+=Opp.Amount;
                    }
                }
                Acc.Total_Amount__c=PseudoAmount;
            }
        }
        if(AccList!=null){ 
            update AccList;
        }
    }
    public static void AccountNoDelete(Map<id,Account> AccMap){
        List<Account> AccQuery=[select id ,(Select id from Contacts where AccountId in :AccMap.keySet()) from Account where id in :AccMap.keySet()];
        if(AccQuery.size()!=0){
            for(Account Acc: AccQuery){
                if(Acc.Contacts.size()>2){
                    Acc.adderror('Account Can\'t be Deleted!!!');
                }
            }
        }
    }
}
