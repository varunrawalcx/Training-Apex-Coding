public class AccountRelatedBookingClass {
    @AuraEnabled
    public static AccountBookingWrapper relatedAccounts(id AccId, date startDate, date endDate){
        AccountBookingWrapper pseudowrapper=new AccountBookingWrapper();
        List<Booking__c> bookList = [Select Name, Start_Date__c,End_Date__c, Account__c from Booking__c
                                     where (Account__c=:AccId) and 
                                     (  (not(Start_Date__c>:startDate and Start_Date__c>=:endDate))and 
                                      (not(End_Date__c<=:startDate and End_Date__c<:endDate)))
                                    ];   
        system.debug(bookList);
        if(bookList.size()==0){
            pseudowrapper.isSuccesfull=true;
            pseudowrapper.Message='Booking Record not Found';
        }else{
            pseudowrapper.bookRecord=bookList;
            pseudowrapper.isSuccesfull=false;
            pseudowrapper.Message='Booking Record Found';
        }
        System.debug(pseudowrapper.isSuccesfull);
        return pseudowrapper;
    }
    @AuraEnabled
    public static void insertBooking(Date startDate, Date endDate, Id accountId) {
        List<Booking__c> bookList = [SELECT Id FROM Booking__c WHERE Account__c=:accountId];
        system.debug(accountId);
        Integer count=1;
        for(Booking__c book:bookList){
            count+=1;
        }
        Booking__c newBooking = new Booking__c(
            Name='booking '+count,
            Start_Date__c = startDate,
            End_Date__c = endDate,
            Comment__c='Booking Confirmed',
            Account__c = accountId
        );
        insert newBooking;
    }
    public class AccountBookingWrapper{
        @AuraEnabled
        public List<Booking__c> bookRecord{get;set;}
        @AuraEnabled
        public String Message{get;set;}
        @AuraEnabled
        public Boolean isSuccesfull{get;set;}
    }
    
}
